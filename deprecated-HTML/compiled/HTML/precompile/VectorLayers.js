"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var react_1 = require("react");
var react_leaflet_1 = require("react-leaflet");
var models_1 = require("./models");
var utilities_1 = require("./utilities");
exports.CircleLayer = function (_a) {
    var layer = _a.layer;
    return (React.createElement(react_leaflet_1.Circle, { key: layer.id, color: layer.color || 'white', 
        // @ts-ignore convertWebViewLeafletLatLngToNumberArray can handle single, array, or 2dArray
        center: utilities_1.convertWebViewLeafletLatLngToNumberArray(layer.center), radius: layer.radius, attribution: layer.attribution || null }));
};
var VectorLayers = function (_a) {
    var addDebugMessage = _a.addDebugMessage, debugMessages = _a.debugMessages, vectorLayers = _a.vectorLayers;
    var _b = react_1.useState([]), layerIds = _b[0], setLayerIds = _b[1];
    // Use this to only add to the parent's debug message array when
    // this functions debug message array changes
    react_1.useEffect(function () {
        addDebugMessage(layerIds);
    }, [layerIds]);
    return (React.createElement(React.Fragment, null, vectorLayers.map(function (mapVectorLayer, index) {
        var layerId = mapVectorLayer.id || index;
        if (!layerIds.includes(JSON.stringify(mapVectorLayer))) {
            setLayerIds(__spreadArrays(layerIds, [JSON.stringify(mapVectorLayer)]));
        }
        switch (mapVectorLayer.type) {
            case models_1.MapVectorLayerType.CIRCLE:
                return (React.createElement(exports.CircleLayer, { layer: mapVectorLayer }));
            case models_1.MapVectorLayerType.CIRCLE_MARKER: {
                var layer = mapVectorLayer;
                return (React.createElement(react_leaflet_1.CircleMarker, { key: mapVectorLayer.id, color: layer.color || 'white', 
                    // @ts-ignore convertWebViewLeafletLatLngToNumberArray can handle single, array, or 2dArray
                    center: convertSingleLatLngToNumberArray(layer.center), radius: layer.radius, attribution: layer.attribution || null }));
            }
            case models_1.MapVectorLayerType.POLYGON: {
                var layer = mapVectorLayer;
                return (React.createElement(react_leaflet_1.Polygon, { key: mapVectorLayer.id, color: layer.color || 'white', 
                    // @ts-ignore convertWebViewLeafletLatLngToNumberArray can handle single, array, or 2dArray
                    positions: utilities_1.convertWebViewLeafletLatLngToNumberArray(layer.positions), attribution: layer.attribution || null }));
            }
            case models_1.MapVectorLayerType.POLYLINE: {
                var layer = mapVectorLayer;
                return (React.createElement(react_leaflet_1.Polyline, { key: mapVectorLayer.id, color: layer.color || 'white', 
                    // @ts-ignore convertWebViewLeafletLatLngToNumberArray can handle single, array, or 2dArray
                    positions: utilities_1.convertWebViewLeafletLatLngToNumberArray(layer.positions), attribution: layer.attribution || null }));
            }
            case models_1.MapVectorLayerType.RECTANGLE: {
                var layer = mapVectorLayer;
                return (React.createElement(react_leaflet_1.Rectangle, { key: mapVectorLayer.id, color: layer.color || 'white', 
                    // @ts-ignore convertWebViewLeafletLatLngToNumberArray can handle single, array, or 2dArray
                    bounds: utilities_1.convertWebViewLeafletLatLngToNumberArray(layer.bounds), attribution: layer.attribution || null }));
            }
            default:
                console.warn('Unknown vector layer type', mapVectorLayer.type);
        }
    })));
};
exports.default = VectorLayers;
//# sourceMappingURL=data:application/json;base64,