"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var L = require('leaflet');
var webBase64Image_1 = require("./webBase64Image");
exports.createDivIcon = function (mapMarker) {
    var divIcon = L.divIcon({
        className: 'clearMarkerContainer',
        html: mapMarker.animation
            ? exports.getAnimatedHTMLString(mapMarker.icon || 'üìç', mapMarker.animation || null, mapMarker.size || [24, 24])
            : getUnanimatedHTMLString(mapMarker.icon, mapMarker.size),
        iconAnchor: mapMarker.iconAnchor || null
    });
    return divIcon;
};
/*
  Get the HTML string containing the icon div, and animation parameters
  */
exports.getAnimatedHTMLString = function (icon, animation, size) {
    if (size === void 0) { size = [24, 24]; }
    return "<div class='animationContainer' style=\"\nanimation-name: " + (animation.type ? animation.type : 'bounce') + ";\nanimation-duration: " + (animation.duration ? animation.duration : 1) + "s ;\nanimation-delay: " + (animation.delay ? animation.delay : 0) + "s;\nanimation-direction: " + (animation.direction ? animation.direction : 'normal') + ";\nanimation-iteration-count: " + (animation.iterationCount ? animation.iterationCount : 'infinite') + "\">\n" + getIconFromEmojiOrImageOrSVG(icon, size) + "\n</div>";
};
var getUnanimatedHTMLString = function (icon, size) {
    if (size === void 0) { size = [24, 24]; }
    return "<div class='unanimatedIconContainer'>" + getIconFromEmojiOrImageOrSVG(icon, size) + "</div>";
};
var getIconFromEmojiOrImageOrSVG = function (icon, size) {
    if (icon.includes('svg') || icon.includes('SVG')) {
        return " <div style='font-size: " + Math.max(size[0], size[1]) + "px'>\n" + icon + "\n</div>";
    }
    else if (icon.includes('//') || icon.includes('base64')) {
        return "<img src=\"" + webBase64Image_1.default + "\" style=\"width:" + size[0] + "px;height:" + size[1] + "px;\">";
    }
    else {
        return "<div style='font-size: " + Math.max(size[0], size[1]) + "px'>" + icon + "</div>";
    }
};
exports.convertSingleLatLngToNumberArray = function (latLng) {
    return [latLng.lat, latLng.lng];
};
exports.convertLatLngArrayToNumberArray = function (latLngs) {
    return latLngs.map(function (latLng) {
        return exports.convertSingleLatLngToNumberArray(latLng);
    });
};
exports.convertWebViewLeafletLatLngToNumberArray = function (latLngs) {
    // received a signle LatLng
    if (!Array.isArray(latLngs)) {
        return exports.convertSingleLatLngToNumberArray(latLngs);
    }
    else {
        // @ts-ignore TS doesn't like that I'm mapping this.
        return latLngs.map(function (latLng) {
            return exports.convertWebViewLeafletLatLngToNumberArray(latLng);
        });
    }
};
exports.convertWebViewLeafletLatLngBoundsToLeaftletBounds = function (bounds) {
    var convertedBounds = null;
    if (bounds.hasOwnProperty('southWest')) {
        var _a = bounds, southWest = _a.southWest, northEast = _a.northEast;
        convertedBounds = {
            southWest: exports.convertWebViewLeafletLatLngToNumberArray(southWest),
            northEast: exports.convertWebViewLeafletLatLngToNumberArray(northEast)
        };
    }
    else {
        convertedBounds = exports.convertWebViewLeafletLatLngToNumberArray(bounds);
    }
    return convertedBounds;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vcHJlY29tcGlsZS91dGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFPN0IsbURBQTJDO0FBRzlCLFFBQUEsYUFBYSxHQUFHLFVBQUMsU0FBb0I7SUFDaEQsSUFBSSxPQUFPLEdBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUMvQixTQUFTLEVBQUUsc0JBQXNCO1FBQ2pDLElBQUksRUFBRSxTQUFTLENBQUMsU0FBUztZQUN2QixDQUFDLENBQUMsNkJBQXFCLENBQ25CLFNBQVMsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUN0QixTQUFTLENBQUMsU0FBUyxJQUFJLElBQUksRUFDM0IsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FDM0I7WUFDSCxDQUFDLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQzNELFVBQVUsRUFBRSxTQUFTLENBQUMsVUFBVSxJQUFJLElBQUk7S0FDekMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUY7O0lBRUk7QUFDUyxRQUFBLHFCQUFxQixHQUFHLFVBQ25DLElBQVMsRUFDVCxTQUE2QixFQUM3QixJQUFpQztJQUFqQyxxQkFBQSxFQUFBLFFBQTBCLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFFakMsT0FBTyxnRUFDUyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLGlDQUN0QyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdDQUM5QyxTQUFTLENBQUMsS0FBSyxDQUFD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QUFnQyxDQUNqQyxDQUFDO0tBQ0g7SUFDRCxPQUFPLGVBQStCLENBQUM7QUFDekMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGl2SWNvbiwgTGF0TG5nLCBCb3VuZHMsIExhdExuZ0JvdW5kcyB9IGZyb20gJ2xlYWZsZXQnO1xyXG5jb25zdCBMID0gcmVxdWlyZSgnbGVhZmxldCcpO1xyXG5pbXBvcnQge1xyXG4gIE1hcE1hcmtlckFuaW1hdGlvbixcclxuICBNYXBNYXJrZXIsXHJcbiAgV2ViVmlld0xlYWZsZXRMYXRMbmdCb3VuZHMsXHJcbiAgV2ViVmlld0xlYWZsZXRMYXRMbmdCb3VuZHNDb3JuZXJzXHJcbn0gZnJvbSAnLi9tb2RlbHMnO1xyXG5pbXBvcnQgYmFzZTY0SW1hZ2UgZnJvbSAnLi93ZWJCYXNlNjRJbWFnZSc7XHJcbmltcG9ydCB7IFdlYlZpZXdMZWFmbGV0TGF0TG5nIH0gZnJvbSAnLi4vLi4vV2ViVmlld0xlYWZsZXQvbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVEaXZJY29uID0gKG1hcE1hcmtlcjogTWFwTWFya2VyKTogRGl2SWNvbiA9PiB7XHJcbiAgbGV0IGRpdkljb246IERpdkljb24gPSBMLmRpdkljb24oe1xyXG4gICAgY2xhc3NOYW1lOiAnY2xlYXJNYXJrZXJDb250YWluZXInLFxyXG4gICAgaHRtbDogbWFwTWFya2VyLmFuaW1hdGlvblxyXG4gICAgICA/IGdldEFuaW1hdGVkSFRNTFN0cmluZyhcclxuICAgICAgICAgIG1hcE1hcmtlci5pY29uIHx8ICfwn5ONJyxcclxuICAgICAgICAgIG1hcE1hcmtlci5hbmltYXRpb24gfHwgbnVsbCxcclxuICAgICAgICAgIG1hcE1hcmtlci5zaXplIHx8IFsyNCwgMjRdXHJcbiAgICAgICAgKVxyXG4gICAgICA6IGdldFVuYW5pbWF0ZWRIVE1MU3RyaW5nKG1hcE1hcmtlci5pY29uLCBtYXBNYXJrZXIuc2l6ZSksXHJcbiAgICBpY29uQW5jaG9yOiBtYXBNYXJrZXIuaWNvbkFuY2hvciB8fCBudWxsXHJcbiAgfSk7XHJcbiAgcmV0dXJuIGRpdkljb247XHJcbn07XHJcblxyXG4vKlxyXG4gIEdldCB0aGUgSFRNTCBzdHJpbmcgY29udGFpbmluZyB0aGUgaWNvbiBkaXYsIGFuZCBhbmltYXRpb24gcGFyYW1ldGVyc1xyXG4gICovXHJcbmV4cG9ydCBjb25zdCBnZXRBbmltYXRlZEhUTUxTdHJpbmcgPSAoXHJcbiAgaWNvbjogYW55LFxyXG4gIGFuaW1hdGlvbjogTWFwTWFya2VyQW5pbWF0aW9uLFxyXG4gIHNpemU6IFtudW1iZXIsIG51bWJlcl0gPSBbMjQsIDI0XVxyXG4pID0+IHtcclxuICByZXR1cm4gYDxkaXYgY2xhc3M9J2FuaW1hdGlvbkNvbnRhaW5lcicgc3R5bGU9XCJcclxuYW5pbWF0aW9uLW5hbWU6ICR7YW5pbWF0aW9uLnR5cGUgPyBhbmltYXRpb24udHlwZSA6ICdib3VuY2UnfTtcclxuYW5pbWF0aW9uLWR1cmF0aW9uOiAke2FuaW1hdGlvbi5kdXJhdGlvbiA/IGFuaW1hdGlvbi5kdXJhdGlvbiA6IDF9cyA7XHJcbmFuaW1hdGlvbi1kZWxheTogJHthbmltYXRpb24uZGVsYXkgPyBhbmltYXRpb24uZGVsYXkgOiAwfXM7XHJcbmFuaW1hdGlvbi1kaXJlY3Rpb246ICR7YW5pbWF0aW9uLmRpcmVjdGlvbiA/IGFuaW1hdGlvbi5kaXJlY3Rpb24gOiAnbm9ybWFsJ307XHJcbmFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6ICR7XHJcbiAgICBhbmltYXRpb24uaXRlcmF0aW9uQ291bnQgPyBhbmltYXRpb24uaXRlcmF0aW9uQ291bnQgOiAnaW5maW5pdGUnXHJcbiAgfVwiPlxyXG4ke2dldEljb25Gcm9tRW1vamlPckltYWdlT3JTVkcoaWNvbiwgc2l6ZSl9XHJcbjwvZGl2PmA7XHJcbn07XHJcblxyXG5jb25zdCBnZXRVbmFuaW1hdGVkSFRNTFN0cmluZyA9IChcclxuICBpY29uOiBhbnksXHJcbiAgc2l6ZTogTC5Qb2ludEV4cHJlc3Npb24gPSBbMjQsIDI0XVxyXG4pOiBzdHJpbmcgPT4ge1xyXG4gIHJldHVybiBgPGRpdiBjbGFzcz0ndW5hbmltYXRlZEljb25Db250YWluZXInPiR7Z2V0SWNvbkZyb21FbW9qaU9ySW1hZ2VPclNWRyhcclxuICAgIGljb24sXHJcbiAgICBzaXplXHJcbiAgKX08L2Rpdj5gO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0SWNvbkZyb21FbW9qaU9ySW1hZ2VPclNWRyA9IChpY29uOiBhbnksIHNpemU6IEwuUG9pbnRFeHByZXNzaW9uKSA9PiB7XHJcbiAgaWYgKGljb24uaW5jbHVkZXMoJ3N2ZycpIHx8IGljb24uaW5jbHVkZXMoJ1NWRycpKSB7XHJcbiAgICByZXR1cm4gYCA8ZGl2IHN0eWxlPSdmb250LXNpemU6ICR7TWF0aC5tYXgoc2l6ZVswXSwgc2l6ZVsxXSl9cHgnPlxyXG4ke2ljb259XHJcbjwvZGl2PmA7XHJcbiAgfSBlbHNlIGlmIChpY29uLmluY2x1ZGVzKCcvLycpIHx8IGljb24uaW5jbHVkZXMoJ2Jhc2U2NCcpKSB7XHJcbiAgICByZXR1cm4gYDxpbWcgc3JjPVwiJHtiYXNlNjRJbWFnZX1cIiBzdHlsZT1cIndpZHRoOiR7c2l6ZVswXX1weDtoZWlnaHQ6JHtzaXplWzFdfXB4O1wiPmA7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBgPGRpdiBzdHlsZT0nZm9udC1zaXplOiAke01hdGgubWF4KFxyXG4gICAgICBzaXplWzBdLFxyXG4gICAgICBzaXplWzFdXHJcbiAgICApfXB4Jz4ke2ljb259PC9kaXY+YDtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29udmVydFNpbmdsZUxhdExuZ1RvTnVtYmVyQXJyYXkgPSAoXHJcbiAgbGF0TG5nOiBXZWJWaWV3TGVhZmxldExhdExuZ1xyXG4pOiBbbnVtYmVyLCBudW1iZXJdID0+IHtcclxuICByZXR1cm4gW2xhdExuZy5sYXQsIGxhdExuZy5sbmddO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbnZlcnRMYXRMbmdBcnJheVRvTnVtYmVyQXJyYXkgPSAoXHJcbiAgbGF0TG5nczogV2ViVmlld0xlYWZsZXRMYXRMbmdbXVxyXG4pID0+IHtcclxuICByZXR1cm4gbGF0TG5ncy5tYXAoKGxhdExuZzogV2ViVmlld0xlYWZsZXRMYXRMbmcpID0+IHtcclxuICAgIHJldHVybiBjb252ZXJ0U2luZ2xlTGF0TG5nVG9OdW1iZXJBcnJheShsYXRMbmcpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbnZlcnRXZWJWaWV3TGVhZmxldExhdExuZ1RvTnVtYmVyQXJyYXkgPSAoXHJcbiAgbGF0TG5nczpcclxuICAgIHwgV2ViVmlld0xlYWZsZXRMYXRMbmdcclxuICAgIHwgV2ViVmlld0xlYWZsZXRMYXRMbmdbXVxyXG4gICAgfCBXZWJWaWV3TGVhZmxldExhdExuZ1tdW11cclxuKTogW251bWJlciwgbnVtYmVyXSB8IFtudW1iZXIsIG51bWJlcl1bXSA9PiB7XHJcbiAgLy8gcmVjZWl2ZWQgYSBzaWdubGUgTGF0TG5nXHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KGxhdExuZ3MpKSB7XHJcbiAgICByZXR1cm4gY29udmVydFNpbmdsZUxhdExuZ1RvTnVtYmVyQXJyYXkobGF0TG5ncyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIEB0cy1pZ25vcmUgVFMgZG9lc24ndCBsaWtlIHRoYXQgSSdtIG1hcHBpbmcgdGhpcy5cclxuICAgIHJldHVybiBsYXRMbmdzLm1hcCgobGF0TG5nKSA9PiB7XHJcbiAgICAgIHJldHVybiBjb252ZXJ0V2ViVmlld0xlYWZsZXRMYXRMbmdUb051bWJlckFycmF5KGxhdExuZyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29udmVydFdlYlZpZXdMZWFmbGV0TGF0TG5nQm91bmRzVG9MZWFmdGxldEJvdW5kcyA9IChcclxuICBib3VuZHM6IFdlYlZpZXdMZWFmbGV0TGF0TG5nQm91bmRzXHJcbik6IExhdExuZ0JvdW5kcyA9PiB7XHJcbiAgbGV0IGNvbnZlcnRlZEJvdW5kcyA9IG51bGw7XHJcbiAgaWYgKGJvdW5kcy5oYXNPd25Qcm9wZXJ0eSgnc291dGhXZXN0JykpIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgc291dGhXZXN0LFxyXG4gICAgICBub3J0aEVhc3RcclxuICAgIH0gPSBib3VuZHMgYXMgV2ViVmlld0xlYWZsZXRMYXRMbmdCb3VuZHNDb3JuZXJzO1xyXG4gICAgY29udmVydGVkQm91bmRzID0ge1xyXG4gICAgICBzb3V0aFdlc3Q6IGNvbnZlcnRXZWJWaWV3TGVhZmxldExhdExuZ1RvTnVtYmVyQXJyYXkoc291dGhXZXN0KSxcclxuICAgICAgbm9ydGhFYXN0OiBjb252ZXJ0V2ViVmlld0xlYWZsZXRMYXRMbmdUb051bWJlckFycmF5KG5vcnRoRWFzdClcclxuICAgIH07XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnZlcnRlZEJvdW5kcyA9IGNvbnZlcnRXZWJWaWV3TGVhZmxldExhdExuZ1RvTnVtYmVyQXJyYXkoXHJcbiAgICAgIGJvdW5kcyBhcyBXZWJWaWV3TGVhZmxldExhdExuZ1tdXHJcbiAgICApO1xyXG4gIH1cclxuICByZXR1cm4gY29udmVydGVkQm91bmRzIGFzIExhdExuZ0JvdW5kcztcclxufTtcclxuIl19